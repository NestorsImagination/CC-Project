# Crea y configura con Ansible las máquinas AWS necesarias para desplegar
# el proyecto Sample Multiplayer Shooter
#
# Uso: vagrant -n[número de Game Worlds] up --provider=aws --- (ejemplo: "vagrant -n2 up --provider=aws")
# Nota: Se requiere tener instalado el plugin de vagrant-aws

require 'getoptlong'

box = "sharpie/dummy"
boxURL = "https://atlas.hashicorp.com/sharpie/boxes/dummy/versions/1.0.0/providers/aws.box"
playbookNode = "playbook_node.yml"
playbookDB = "playbook_db.yml"

opts = GetoptLong.new([ '-n', GetoptLong::REQUIRED_ARGUMENT ],
                      [ '--provider', GetoptLong::OPTIONAL_ARGUMENT ])

numGameWorlds = 1

opts.each do |opt, arg|
  case opt
    when '-n'
      numGameWorlds = arg.to_i
      puts "Creating #{numGameWorlds} Game Worlds..."
  end
end

accessKeyID = ### Añadir Access Key ID ###
secretKey = ### Añadir Secret Key ###
keyPairName = ### Añadir nombre del Key Pair ###
privateKey = ### Añadir ruta desde este directorio a la Private Key ###

Vagrant.configure(2) do |config|

  # Servidor Maestro
  config.vm.define "master" do |master|
    master.vm.box = box
    master.vm.box_url = boxURL
    master.vm.network "private_network", ip: "192.168.50.2"

    master.vm.provision :ansible do |ansible|
      ansible.playbook = playbookNode
      ansible.verbose = true
      ansible.limit = "all"
    end

    master.vm.provider 'aws' do |aws, override|
      aws.access_key_id = accessKeyID
      aws.secret_access_key = secretKey
      aws.keypair_name = keyPairName
      aws.region = 'eu-central-1'
      aws.ami = 'ami-99ca30f6'
      aws.instance_type = "t2.micro"
      aws.security_groups = ["Vagrant"]
      aws.tags = {'Name' => 'Shooter_Master'}

      override.ssh.username = 'ubuntu'
      override.ssh.private_key_path = privateKey
    end
  end

  # Servicio de "Login" (base de datos de los usuarios existentes)
  config.vm.define "login_service" do |login|
    login.vm.box = box
    login.vm.box_url = boxURL
    login.vm.network "private_network", ip: "192.168.50.3"

    login.vm.provision :ansible do |ansible|
      ansible.playbook = playbookDB
      ansible.verbose = true
      ansible.limit = "all"
    end

    login.vm.provider 'aws' do |aws, override|
      aws.access_key_id = accessKeyID
      aws.secret_access_key = secretKey
      aws.keypair_name = keyPairName
      aws.region = 'eu-central-1'
      aws.ami = 'ami-99ca30f6'
      aws.instance_type = "t2.micro"
      aws.security_groups = ["Vagrant"]
      aws.tags = {'Name' => 'Shooter_Login_Service'}

      override.ssh.username = 'ubuntu'
      override.ssh.private_key_path = privateKey
    end
  end

  # Servicio de Gestión de jugadores (base de datos con los datos relativos a los jugadores)
  config.vm.define "player_manager" do |players|
    players.vm.box = box
    players.vm.box_url = boxURL
    players.vm.network "private_network", ip: "192.168.50.4"

    players.vm.provision :ansible do |ansible|
      ansible.playbook = playbookDB
      ansible.verbose = true
      ansible.limit = "all"
    end

    players.vm.provider 'aws' do |aws, override|
      aws.access_key_id = accessKeyID
      aws.secret_access_key = secretKey
      aws.keypair_name = keyPairName
      aws.region = 'eu-central-1'
      aws.ami = 'ami-99ca30f6'
      aws.instance_type = "t2.micro"
      aws.security_groups = ["Vagrant"]
      aws.tags = {'Name' => 'Shooter_Player_Manager'}

      override.ssh.username = 'ubuntu'
      override.ssh.private_key_path = privateKey
    end
  end

  # Servicio Matchmaker (referenciará y manejará los Game Worlds e inicio de partidas)
  config.vm.define "matchmaker" do |matchmaker|
    matchmaker.vm.box = box
    matchmaker.vm.box_url = boxURL
    matchmaker.vm.network "private_network", ip: "192.168.50.5"

    matchmaker.vm.provision :ansible do |ansible|
      ansible.playbook = playbookNode
      ansible.verbose = true
      ansible.limit = "all"
    end

    matchmaker.vm.provider 'aws' do |aws, override|
      aws.access_key_id = accessKeyID
      aws.secret_access_key = secretKey
      aws.keypair_name = keyPairName
      aws.region = 'eu-central-1'
      aws.ami = 'ami-99ca30f6'
      aws.instance_type = "t2.micro"
      aws.security_groups = ["Vagrant"]
      aws.tags = {'Name' => 'Matchmaker'}

      override.ssh.username = 'ubuntu'
      override.ssh.private_key_path = privateKey
    end
  end

  # Crea los Game Worlds
  (1..numGameWorlds).each do |i|

    worldMasterIP = 4+i*2
    worldSimulatorIP = worldMasterIP+1

    # World Master (se comunicará con el Master Server y el World Simulator, recogiendo
    # Inputs y enviando Outputs a los clientes, de forma que queden sincronizados)
    config.vm.define "world_master_#{i}" do |world_master|
      world_master.vm.box = box
      world_master.vm.box_url = boxURL
      world_master.vm.network "private_network", ip: "192.168.50.#{worldMasterIP}"

      world_master.vm.provision :ansible do |ansible|
        ansible.playbook = playbookNode
        ansible.verbose = true
        ansible.limit = "all"
      end

      world_master.vm.provider 'aws' do |aws, override|
        aws.access_key_id = accessKeyID
        aws.secret_access_key = secretKey
        aws.keypair_name = keyPairName
        aws.region = 'eu-central-1'
        aws.ami = 'ami-99ca30f6'
        aws.instance_type = "t2.micro"
        aws.security_groups = ["Vagrant"]
        aws.tags = {'Name' => "World_Master_#{i}"}

        override.ssh.username = 'ubuntu'
        override.ssh.private_key_path = privateKey
      end
    end

    # World Simulator (se encargará de ejecutar un ejecutable que simule el juego)
    config.vm.define "world_simulator_#{i}" do |world_simulator|
      world_simulator.vm.box = box
      world_simulator.vm.network "private_network", ip: "192.168.50.#{worldSimulatorIP}"

      world_simulator.vm.provider 'aws' do |aws, override|
        aws.access_key_id = accessKeyID
        aws.secret_access_key = secretKey
        aws.keypair_name = keyPairName
        aws.region = 'eu-central-1'
        aws.ami = 'ami-99ca30f6'
        aws.instance_type = "t2.micro"
        aws.security_groups = ["Vagrant"]
        aws.tags = {'Name' => "World_Simulator_#{i}"}

        override.ssh.username = 'ubuntu'
        override.ssh.private_key_path = privateKey
      end
    end

  end

end
